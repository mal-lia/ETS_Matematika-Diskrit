# -*- coding: utf-8 -*-
"""Evaluasi Tengah Semester (ETS) - 24083010034 Matematika Diskrit (Aisyah Amalia Hamid).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mrRoI5xVtsLMQiiLaqFPtSOOBSQ6CGD5

# **Evaluasi Tengah Semester Matematika Diskrit**
**Aisyah Amalia Hamid**
**(24083010034)**

**Matematika Diskrit Kelas (A)**

**Artikel 'Research and Analysis Of New Generation Nuclear Reactors In The World**

**DOI: [10.31548/machinery/4.2023.86](https://www.researchgate.net/publication/377915095_Research_and_analysis_of_new_generation_nuclear_reactors_in_the_world)**

## **Import Library yang Diperlukan**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
import numpy as np
from collections import Counter
from wordcloud import WordCloud

"""## **Analisis Abstrak**

**1. Input Teks Abstrak dari Artikel 'Research and Analysis Of New Generation Nuclear Reactors In The World**
"""

teks = """
The research of new nuclear reactors is gaining urgent importance worldwide due to the need for continuous improvement of technologies to ensure safety,
efficiency, and emissions reduction. This is crucial in the context of climate change and rapid technological development, which demand constant updating
and improvement of nuclear energy. The objective of the study was to analyse next-generation reactors worldwide and identify their advantages and potential
prospects for the future. The research utilized statistical, comparative, and analytical methods. The results of the analysis considered contemporary
technological and safety parameters related to the operation of such reactors, including their ability to optimize fuel usage, enhance operational safety,
and effectively manage radioactive waste. As a result of the study, fourth-generation nuclear reactors were analysed, including fast neutron reactors using gas cooling,
very high-temperature reactors, reactors using sodium as a coolant, fast neutron reactors with lead cooling, reactors where the reaction occurs in molten salt, and supercritical
water-cooled reactors. Each of these reactors has its unique features that make them distinctive in their application. For example, gas-cooled reactors have high productivity due
\to their ability to achieve high temperatures without significant pressure. On the other hand, molten salt reactors offer flexibility in using different types of fuel,
including spent fuel, and can help reduce the level of radioactive waste through the use of special materials. During the analysis, it was noted that fourth-generation reactors,
using various cooling and reaction-slowing technologies, are characterized by high efficiency, low accident risk, and the ability to produce stable electricity.
Improved methods of reaction control open up new possibilities for the efficient production of electricity and increased safety in nuclear energy.
"""

"""**2. Tabel Pivot Konsonan-Vokal Per Kata dalam Abstrak (A) Frekuensi Kombinasi Vokal-Konsonan**"""

def hitung_konsonan_dan_vokal(kata):
    vokal = re.findall(r'[aeiouAEIOU]', kata)
    konsonan = re.findall(r'[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]', kata)
    return len(vokal), len(konsonan)

kata = re.findall(r'\b\w+\b', teks)
df_kata = pd.DataFrame(kata, columns=['kata'])
df_kata['vokal'], df_kata['konsonan'] = zip(*df_kata['kata'].map(hitung_konsonan_dan_vokal))
df_kata['length'] = df_kata['kata'].apply(len)

# Frekuensi Kombinasi Vokal-Konsonan
pivot_frekuensi = df_kata.groupby(['vokal','konsonan']).size().unstack(fill_value=0)

plt.figure(figsize=(8,6))
sns.heatmap(pivot_frekuensi, annot=True, fmt='d', cmap='viridis')
plt.title("Heatmap Frekuensi Kombinasi Vokal–Konsonan per Kata (Abstrak)")
plt.xlabel("Jumlah Konsonan")
plt.ylabel("Jumlah Vokal")
plt.tight_layout()
plt.show()

""">**Interpretasi Heatmap Frekuensi Kombinasi Vokal-Konsonan Per Kata (Abstrak)**

>Dari visualisasi, kombinasi dengan dua konsonan dan satu vokal memiliki frekuensi tertinggi, yaitu 45. **Pola mengindikasi bahwa kata-kata dengan struktur pendek dan sederhana (seperti “dan”, “bisa”, atau “pada”) mendominasi isi abstrak.** Kombinasi lain yang cukup sering ada satu konsonan dan satu vokal (33 kata), serta tiga konsonan dan satu vokal (19 kata). Menunjukkan sebagian besar kata dalam abstrak memiliki panjang relatif singkat dengan susunan tidak kompleks.

>Membuat **kombinasi dengan jumlah vokal atau konsonan yang tinggi cenderung jarang muncul.** Misalnya, kata lebih dari lima konsonan atau lebih dari empat vokal memiliki frekuensi sangat rendah atau bahkan tidak muncul sama sekali.

>Secara keseluruhan, Heatmap menggambarkan kecenderungan struktur kata dalam abstrak artikel ilmiah didominasi oleh **kata-kata dengan jumlah konsonan dan vokal yang seimbang dalam kisaran dua hingga empat huruf utama.** Pola distribusi ini juga dapat mencerminkan karakteristik umum bahasa ilmiah yang mengutamakan kejelasan dan efisiensi penyampaian makna dibandingkan kompleksitas bentuk kata.

**2.1 Tabel Pivot Konsonan-Vokal Per Kata dalam Abstrak (B) Cacah Kata (Jumlah Kata Per Kombinasi)**
"""

# Cacah Kata (Jumlah Kata Per Kombinasi)
pivot_jumlah = df_kata.groupby(['vokal','konsonan']).size().unstack(fill_value=0)

plt.figure(figsize=(8,6))
sns.heatmap(pivot_jumlah, annot=True, fmt='d', cmap='coolwarm')
plt.title("Heatmap Cacah Kata per Kombinasi Vokal–Konsonan (Abstrak)")
plt.xlabel("Jumlah Konsonan")
plt.ylabel("Jumlah Vokal")
plt.tight_layout()
plt.show()

print("\n🔹 Kombinasi dengan Jumlah Kata Terbanyak dalam Abstrak:")
print(pivot_jumlah.stack().sort_values(ascending=False).head(5))

""">**Interpretasi Heatmap Cacah Kata Per Kombinasi Vokal-Konsonan (Abstrak)**

>Dari pola distribusi, kombinasi **dua konsonan dan satu vokal** kembali menjadi yang paling dominan dengan jumlah **45**. Menunjukkan sebagian besar kata dalam abstrak memiliki struktur sederhana dengan rasio vokal dan konsonan yang tidak terlalu jauh berbeda.

>Area dengan nilai rendah seperti kata yang memiliki **lebih dari lima konsonan** atau **lebih dari empat vokal**, menunjukkan frekuensi yang sangat kecil. Menandakan kata-kata yang panjang dan kompleks relatif jarang digunakan dalam bagian abstrak.

>Jika dibandingkan dengan heatmap frekuensi, pola persebarannya konsisten. Artinya, dari jumlah kemunculan maupun keunikan kata, strukturnya tetap sederhana. Membuat teks ilmiah pada bagian abstrak bersifat padat informasi, tetapi menggunakan bentuk kata yang efisien dan tidak berlebihan agar mudah dipahami.

---

>**Kombinasi dengan Jumlah Kata Terbanyak dalam Abstrak:**
>Analisis frekuensi menunjukkan kombinasi 1 vokal dan 2 konsonan yang paling sering muncul, yaitu 45. Kombinasi lain adalah 1 vokal dan 1 konsonan (33), 3 vokal dan 5 konsonan (24), 3 vokal dan 4 konsonan (23), serta 1 vokal dan 3 konsonan (19). Distribusi menjelaskan banyaknya kata berstruktur pendek dalam abstrak dan kata dengan jumlah huruf yang sedikit (kata sambung, preposisi, atau istilah umum yang ringkas) sering dipakai, sesuai fungsi abstrak yang menekankan penyajian ringkas dan padat.

**2.2 Tabel Pivot Konsonan-Vokal Per Kata dalam Abstrak (C) Rata-Rata Panjang Kata (Analisis Tambahan)**
"""

# (c) Rata-Rata Panjang Kata (Analisis Tambahan)
panjang_pivot = df_kata.groupby(['vokal','konsonan'])['length'].mean().unstack(fill_value=0)
sns.heatmap(panjang_pivot, annot=True, fmt='.1f', cmap='viridis')
plt.title("\nHeatmap Rata-Rata Panjang Kata per Kombinasi Vokal–Konsonan (Abstrak)")
plt.show()

""">**Interpretasi Heatmap Rata-Rata Panjang Kata Per Kombinasi Vokal-Konsonan (Abstrak)**

>Dari pola distribusi, terlihat **kecenderungan linear antara panjang kata dengan jumlah huruf konsonan dan vokal**. Semakin banyak huruf penyusun ( konsonan maupun vokal), semakin tinggi nilai rata-rata panjang kata. Misalnya, kombinasi **tujuh konsonan dan enam vokal** menghasilkan rata-rata panjang kata sekitar **13 huruf**, sedangkan kombinasi **dua konsonan dan satu vokal** hanya memiliki rata-rata sekitar **tiga huruf**.

>Pola ini menjelaskan hubungan bahwa panjang kata ditentukan oleh total huruf penyusunnya. Namun, **penambahan konsonan lebih berpengaruh terhadap panjang kata dibandingkan penambahan vokal.** Gradien warna meningkat lebih cepat ke arah sumbu konsonan dibandingkan sumbu vokal. Artinya, sebagian besar variasi panjang kata dalam abstrak lebih banyak ditentukan oleh jumlah konsonan.

>Sementara, area dengan kombinasi vokal dan konsonan rendah (satu vokal dan satu konsonan) memiliki warna gelap dengan nilai mendekati nol hingga tiga. Menunjukkan kata pendek dalam abstrak, seperti kata sambung, preposisi, atau kata bantu, memang sering digunakan dalam kalimat ilmiah untuk menghubungkan ide secara efisien.

**3. Jumlah Kata dalam Kalimat Abstrak**
"""

kalimat = re.split(r'(?<=[.!?]) +', teks.strip())
df_kalimat = pd.DataFrame({'kalimat': kalimat})
df_kalimat['hitung_kata'] = df_kalimat['kalimat'].apply(lambda x: len(re.findall(r'\b\w+\b', x)))

plt.figure(figsize=(7,4))
plt.hist(df_kalimat['hitung_kata'], bins=10, edgecolor='purple', color='lavender')
plt.title("Histogram Jumlah Kata per Kalimat")
plt.xlabel("Jumlah Kata")
plt.ylabel("Frekuensi")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

print("\n📊 Rata-rata Kata per Kalimat dalam Abstrak:", round(df_kalimat['hitung_kata'].mean(), 2))

""">**Interpretasi Histogram Jumlah Kata Per Kalimat**

>Terlihat bahwa jumlah kata per kalimat dalam abstrak **bervariasi antara sekitar 8 hingga 50 kata**. Dengan sebagian besar kalimat berada pada rentang **20–35 kata**, dari batang histogram dengan frekuensi tertinggi. Artinya, kalimat dalam abstrak umumnya berukuran sedang.

>Histogram menunjukkan bahwa abstrak cenderung menggunakan struktur kalimat **informatif namun ringkas**, khas gaya ilmiah. Kalimat terlalu panjang relatif jarang, karena abstrak menuntut kejelasan dan efisiensi dalam penyampaian ide. Sebaliknya, kalimat sangat pendek (di bawah 10 kata) juga jarang ditemukan, karena tidak cukup memuat informasi yang lengkap.

**4. Jumlah Kalimat per Paragraf dalam Abstrak**
"""

paragraf = [p for p in teks.split('\n') if p.strip()]
df_para = pd.DataFrame({'paragraf': paragraf})
df_para['jumlah_kalimat'] = df_para['paragraf'].apply(lambda p: len(re.split(r'(?<=[.!?]) +', p.strip())))

plt.figure(figsize=(6,3))
plt.hist(df_para['jumlah_kalimat'], bins=5, color='purple', edgecolor='lavender')
plt.title("Histogram Jumlah Kalimat per Paragraf")
plt.xlabel("Jumlah Kalimat")
plt.ylabel("Frekuensi")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

print("\n📈 Rata-Rata Kalimat per Paragraf dalam Abstrak:", round(df_para['jumlah_kalimat'].mean(), 2))

""">**Interpretasi Histogram Jumlah Kalimat per Paragraf (Abstrak)**

>Dari Histogram, sebagian besar paragraf dalam abstrak terdiri **satu hingga dua kalimat**, masing-masing dengan frekuensi yang sama tinggi, yakni **lima paragraf**. Sementara itu, sedikit paragraf (sekitar dua paragraf) yang memiliki **tiga kalimat**. Menunjukkan abstrak ditulis secara **ringkas dan langsung ke inti**, dengan kalimat-kalimat padat informasi.

>Struktur paragraf yang relatif pendek membantu menjaga fokus pembaca pada aspek-aspek utama, seperti tujuan, metode, dan hasil penelitian. Sehingga, penulis mengutamakan **efisiensi penyampaian informasi** daripada panjang uraian.

# **Analisis Kesimpulan**

**1. Input Teks Kesimpulan dari Artikel 'Research and Analysis Of New Generation Nuclear Reactors In The World**
"""

kesimpulan = """
Summarizing the results of the conducted research, it should be emphasized that the development of nuclear technologies is of great significance for the present and future energy landscape. Nuclear energy is considered a
substantial source due to its potential to provide electricity over extended periods, even considering its non-renewability. However, it is important to bear in mind that modern nuclear power plants generate radioactive
waste, requiring careful control and storage. In this context, fourth-generation reactors can not only reduce the amount of generated radioactive waste but also optimize fuel utilization and decrease the risks of accidents.
Their key advantage lies in the use of advanced technologies allowing the processing of waste, reducing their radioactivity and storage duration. Additionally, new reactors may feature improved cooling systems and automated
control mechanisms, enhancing their safety and reliability. During this study, six main types of nuclear installations were thoroughly analysed, including: GFR (HTR), VHTR, SFR, LFR, MSR and SCWR. Among the critical aspects,
the study also delved into various types of reactor cooling, analysing possibilities for reducing radioactive waste and addressing safety risks associated with nuclear installations. Furthermore, attention was given to exploring
promising directions in the development of new reactors, aiming for more efficient nuclear fuel utilization and reduced radioactivity of waste. These aspects were investigated to identify key trends and opportunities for the
further development of nuclear technologies to ensure a sustainable and secure energy future. Major directions for further research into next-generation reactors may include the optimization of cooling systems to enhance heat
exchange efficiency and ensure better temperature control, the development of monitoring systems for constant control of reactor parameters, and the improvement of emergency systems to minimize potential adverse consequences.
Equally important is the advancement of methods for managing radioactive waste, including reduction and further processing. All these research directions have the potential to reshape the paradigm in nuclear energy, directing
its development toward a more sustainable, secure, and efficient future. """

type(kesimpulan)

"""**2. Tabel Pivot Konsonan-Vokal Per Kata Pada Kesimpulan (A) Frekuensi Kombinasi Vokal-Konsonan**"""

def hitung_k_dan_v(kesimpulan):
    vokal = re.findall(r'[aeiouAEIOU]', kesimpulan)
    konsonan = re.findall(r'[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]', kesimpulan)
    return len(vokal), len(konsonan)

kata_kesimpulan = re.findall(r'\b\w+\b', kesimpulan)
df_kesimpulan = pd.DataFrame(kata_kesimpulan, columns=['kata'])
df_kesimpulan['vokal'], df_kesimpulan['konsonan'] = zip(*df_kesimpulan['kata'].map(hitung_k_dan_v))
df_kesimpulan['length'] = df_kesimpulan['kata'].apply(len)

# Frekuensi Kombinasi Vokal-Konsonan
pivot_frekuensi_kesimpulan = df_kesimpulan.groupby(['vokal','konsonan']).size().unstack(fill_value=0)

plt.figure(figsize=(8,6))
sns.heatmap(pivot_frekuensi_kesimpulan, annot=True, fmt='d', cmap='viridis')
plt.title("Heatmap Frekuensi Kombinasi Vokal–Konsonan per Kata Pada Kesimpulan")
plt.xlabel("Jumlah Konsonan")
plt.ylabel("Jumlah Vokal")
plt.tight_layout()
plt.show()

""">**Interpretasi Heatmap Frekuensi Kombinasi Vokal-Konsonan Per Kata Pada Kesimpulan**

>Dari Heatmap, dapat diketahui bahwa kombinasi **1 vokal dan 2 konsonan** muncul paling banyak (warna paling terang), yaitu **56 kali**. Kemudian disusul oleh kombinasi **1 vokal dan 1 konsonan** yang juga cukup sering (38 kali). Dari temuan ini, dapat disimpulkan bahwa semakin panjang kata (lebih banyak vokal/konsonan), frekuensinya cenderung menurun.

>Sehingga, **kata-kata dalam bagian kesimpulan lebih banyak didominasi oleh kata pendek**, misalnya kata dengan struktur sederhana seperti *dan, hal, ini, itu,* dll.

**2.1 Tabel Pivot Konsonan-Vokal Per Kata Pada Kesimpulan (B) Cacah Kata (Jumlah Kata Per Kombinasi)**
"""

# Cacah Kata (Jumlah Kata Per Kombinasi)
pivot_jumlah_kesimpulan = df_kesimpulan.groupby(['vokal','konsonan']).size().unstack(fill_value=0)

plt.figure(figsize=(8,6))
sns.heatmap(pivot_jumlah_kesimpulan, annot=True, fmt='d', cmap='coolwarm')
plt.title("Heatmap Cacah Kata per Kombinasi Vokal–Konsonan Pada Kesimpulan")
plt.xlabel("Jumlah Konsonan")
plt.ylabel("Jumlah Vokal")
plt.tight_layout()
plt.show()

print("\n🔹 Kombinasi dengan Jumlah Kata Terbanyak Pada Kesimpulan:")
print(pivot_jumlah_kesimpulan.stack().sort_values(ascending=False).head(5))

""">**Interpretasi Heatmap Cacah Kata Per Kombinasi Vokal-Konsonan Pada Kesimpulan**

>Heatmap Cacah Kata Per Kombinasi Vokal-Konsonan Pada Kesimpulan membantu mempertegas hasil konsistensi dari Heatmap Frekuensi, visualisasi data ini menjelaskan bahwa puncak distribusi tetap berada di kombinasi **vokal=1, konsonan=2** dan **vokal=1, konsonan=1**.
---
>**Kombinasi dengan Jumlah Kata Terbanyak Pada Kesimpulan:**

>Pada kesimpulan, pola yang muncul serupa dengan Abstrak, namun **lebih terkonsentrasi pada bentuk yang pendek.** Kombinasi 1 vokal dan 2 konsonan menempati posisi tertinggi dengan 56 kata, diikuti 1 vokal dan 1 konsonan sebanyak 38 kata. Kemudian, posisi berikutnya ditempati oleh kombinasi 3 vokal dan 4 konsonan (25 kata), 3 vokal dan 5 konsonan (19 kata), dan 2 vokal dan 2 konsonan (17 kata). Perbandingan ini menunjukkan bahwa **kesimpulan cenderung menggunakan proporsi kata pendek yang sedikit lebih besar dibandingkan abstrak, karena kesimpulan menegaskan kembali temuan dengan ungkapan ringkas dan padat.**

**2.2 Tabel Pivot Konsonan-Vokal Per Kata Pada Kesimpulan (C) Rata-Rata Panjang Kata (Analisis Tambahan)**
"""

# Rata-Rata Panjang Kata (Analisis Tambahan)
panjang_pivot_kesimpulan = df_kesimpulan.groupby(['vokal','konsonan'])['length'].mean().unstack(fill_value=0)
sns.heatmap(panjang_pivot_kesimpulan, annot=True, fmt='.1f', cmap='viridis')
plt.title("\nHeatmap Rata-Rata Panjang Kata per Kombinasi Vokal–Konsonan Pada Kesimpulan")
plt.show()

""">**Interpretasi Heatmap Rata-Rata Panjang Kata per Kombinasi Vokal–Konsonan Pada Kesimpulan**

>Heatmap untuk analisis tambahan ini menunjukkan bahwa semakin tinggi jumlah vokal dan konsonan, semakin panjang pula kata tersebut, terlihat dari gradien warna yang makin terang ke kanan–bawah. **Contoh:** kombinasi (vokal=6, konsonan=7) menghasilkan kata dengan panjang rata-rata 13 huruf.

>Sehingga, untuk **area atas–kiri (kata pendek)** didominasi oleh kata-kata umum dan sering muncul. Semetara **area kanan–bawah (kata panjang)** menunjukkan bentuk kata yang lebih kompleks atau turunan (seperti pengembangan, dilaksanakan, dll). Menjelaskan bahwa struktur kata di bagian kesimpulan **relatif efisien dan tidak terlalu panjang**, sesuai fungsi kesimpulan yang umumnya padat dan langsung pada inti.

**3. Jumlah Kata dalam Kalimat Kesimpulan**
"""

kalimat_kesimpulan = re.split(r'(?<=[.!?]) +', kesimpulan.strip())
df_kalimat_kesimpulan = pd.DataFrame({'kalimat_kesimpulan': kalimat_kesimpulan})
df_kalimat_kesimpulan['hitung_kata'] = df_kalimat_kesimpulan['kalimat_kesimpulan'].apply(lambda x: len(re.findall(r'\b\w+\b', x)))

plt.figure(figsize=(7,4))
plt.hist(df_kalimat_kesimpulan['hitung_kata'], bins=10, edgecolor='maroon', color='pink')
plt.title("Histogram Jumlah Kata per Kalimat dalam Kesimpulan")
plt.xlabel("Jumlah Kata")
plt.ylabel("Frekuensi")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

print("\n📊 Rata-rata Kata per Kalimat dalam Kesimpulan:", round(df_kalimat_kesimpulan['hitung_kata'].mean(), 2))

""">**Interpretasi Histogram Jumlah Kata per Kalimat (Kesimpulan)**

>Dari Histogram, sebagian besar kalimat dalam kesimpulan memiliki panjang **antara 18 hingga 30 kata**. Rentang ini dominan, membuat kesimpulan kesimpulan cenderung menggunakan kalimat **singkat dan langsung** dibandingkan bagian abstrak. Namun, terdapat pula kalimat yang jauh lebih panjang (sekitar 50–60 kata), meski jumlahnya sedikit. Yang biasanya digunakan untuk **menyimpulkan keseluruhan hasil penelitian** dalam satu pernyataan yang kompleks dan informatif.

>Pola distribusi memperlihatkan bahwa kesimpulan ditulis dengan **padat dan ringkas**, untuk merangkum inti penelitian tanpa detail berlebihan. Kalimat yang lebih pendek juga membantu meningkatkan keterbacaan dan mempertegas pesan utama yang ingin disampaikan penulis. Jika dibandingkan dengan Abstrak, distribusi pada kesimpulan **lebih terpusat dan sempit**, menandakan struktur kalimat lebih sederhana. Karena kesimpulan tidak perlu menjelaskan konteks atau metode, melainkan menekankan hasil dan makna penelitian.

**4. Jumlah Kalimat per Paragraf dalam Kesimpulan**
"""

paragraf = [p for p in kesimpulan.split('\n') if p.strip()]
df_para = pd.DataFrame({'paragraf': paragraf})
df_para['jumlah_kalimat'] = df_para['paragraf'].apply(lambda p: len(re.split(r'(?<=[.!?]) +', p.strip())))

plt.figure(figsize=(6,3))
plt.hist(df_para['jumlah_kalimat'], bins=5, color='maroon', edgecolor='pink')
plt.title("Histogram Jumlah Kalimat per Paragraf")
plt.xlabel("Jumlah Kalimat")
plt.ylabel("Frekuensi")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

print("\n📈 Rata-Rata Kalimat per Paragraf dalam Kesimpulan:", round(df_para['jumlah_kalimat'].mean(), 2))

""">**Interpretasi Histogram Jumlah Kalimat Per Paragraf**

>Dari Histogram, distribusi menunjukkan karakteristik yang cukup unik dan terpolarisasi. Pola menunjukkan bahwa **sebagian besar paragraf terdiri dari satu kalimat saja,** terlihat dari batang histogram tertinggi yang mencapai nilai sekitar 8 pada sumbu frekuensi.

>Sebaliknya, paragraf dengan dua kalimat menunjukkan **frekuensi yang jauh lebih rendah, hanya sekitar setengah dari paragraf satu kalimat.** Sementara paragraf dengan tiga kalimat hampir tidak muncul, terlihat dari batang histogram yang sangat pendek mendekati nol. Distribusi membentuk pola yang semakin menurun tajam seiring dengan bertambahnya jumlah kalimat per paragraf. Tidak adanya paragraf dengan lebih dari tiga kalimat menunjukkan bahwa **teks ini memiliki konsistensi dalam menjaga paragraf tetap singkat dan padat.**

# **Analisis Tambahan XD**

**1. Frekuensi Kata Terbanyak dalam Abstrak VS Frekuensi Kata Terbanyak dalam Kesimpulan**
"""

# Frekuensi Kata Terbanyak dalam Abstrak
kata_stop = set(['the','and','of','in','to','for','a','is','on','as','was','by','with','an','at','this','that','it'])
saring_kata = [w.lower() for w in kata if w.lower() not in kata_stop and len(w) > 2]
jumlah_kata = Counter(saring_kata)

df_frekuensi = pd.DataFrame(jumlah_kata.most_common(10), columns=['kata', 'jumlah'])

plt.figure(figsize=(8,4))
sns.barplot(data=df_frekuensi, x='jumlah', y='kata', palette='flare', hue='kata')

# Tambahkan nilai frekuensi di ujung batang dalam Abstrak
for i, v in enumerate(df_frekuensi['jumlah']):
    plt.text(v + 0.2, i, str(v), color='black', va='center', fontsize=10)

plt.title("10 Kata Paling Sering Muncul dalam Abstrak")
plt.xlabel("Frekuensi")
plt.ylabel("Kata")
plt.tight_layout()
plt.show()

 # Frekuensi Kata Terbanyak dalam Kesimpulan
kata_kesimpulan_stop = set(['the','and','of','in','to','for','a','is','on','as','was','by','with','an','at','this','that','it'])
saring_kata_kesimpulan = [w.lower() for w in kata_kesimpulan if w.lower() not in kata_kesimpulan_stop and len(w) > 2]
jumlah_kata_kesimpulan = Counter(saring_kata_kesimpulan)

df_frekuensi_kesimpulan = pd.DataFrame(jumlah_kata_kesimpulan.most_common(10), columns=['kata_kesimpulan', 'jumlah_kesimpulan'])

plt.figure(figsize=(8,4))
sns.barplot(data=df_frekuensi_kesimpulan, x='jumlah_kesimpulan', y='kata_kesimpulan', palette='flare', hue='kata_kesimpulan')

# Tambahkan nilai frekuensi di ujung batang dalam Kesimpulan
for i, v in enumerate(df_frekuensi_kesimpulan['jumlah_kesimpulan']):
    plt.text(v + 0.2, i, str(v), color='black', va='center', fontsize=10)

plt.title("\n10 Kata Paling Sering Muncul dalam Kesimpulan")
plt.xlabel("Frekuensi")
plt.ylabel("Kata")
plt.tight_layout()
plt.show()

""">**Interpretasi 10 Kata Paling Sering Muncul dalam Abstrak VS dalam Kesimpulan**

>Pada bagian **Abstrak,** kata **"reactors"** mendominasi dengan frekuensi yang sangat mencolok yaitu **14 kali**, jauh melampaui kata-kata lainnya yang hanya muncul 3-4 kali. Kata kunci seperti "nuclear", "safety", "using", "high", dan "generation" menjelaskan bahwa abstrak berfokus pada teknis operasional reaktor nuklir, khususnya keselamatan dan kemampuan dalam penggunaan bahan bakar.

>Sementara pada **Kesimpulan,** terjadi perluasan cakupan topik yang signifikan. Kata **"nuclear"** tetap menjadi kata kunci utama dengan frekuensi **8 kali**, namun diikuti oleh kata-kata yang lebih luas seperti "waste", "energy", "development", dan "radioactive". Menunjukkan dari fokus teknis spesifik tentang reaktor di abstrak, kesimpulan mengarah pada pengelolaan limbah nuklir, pengembangan energi, dan aspek penelitian. Munculnya "systems" dan "technologies" dalam kesimpulan menjelaskan pembahasan telah berkembang dari sekadar reaktor menuju sistem yang lebih komprehensif.

>Sehingga, **"reactors"** yang dominan di abstrak turun frekuensinya di kesimpulan, sementara  **"waste"** muncul sebagai kata penting kedua. Menjelaskan bahwa meskipun reaktor nuklir menjadi subjek utama penelitian, tantangan terbesar justru terletak pada pengelolaan limbah radioaktif. Menunjukkan bahwa **penelitian yang berkembang dari aspek teknis operasional menuju implikasi lingkungan dan pengembangan sistem energi berkelanjutan.**

**2. Word Cloud**
"""

# Word Cloud Abstrak
teks_bersih = " ".join(saring_kata)

wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='flare', max_words=100).generate(teks_bersih)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.title("Word Cloud – Kata Dominan dalam Abstrak", fontsize=14, pad=15)
plt.tight_layout()
plt.show()

# Word Cloud Kesimpulan
teks_bersih_kesimpulan = " ".join(saring_kata_kesimpulan)

wordcloud_kesimpulan = WordCloud(width=800, height=400, background_color='white', colormap='flare', max_words=100).generate(teks_bersih_kesimpulan)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud_kesimpulan, interpolation='bilinear')
plt.axis("off")
plt.title("\nWord Cloud – Kata Dominan dalam Kesimpulan", fontsize=14, pad=15)
plt.tight_layout()
plt.show()

""">**Interpretasi Word Cloud Pada Abstrak VS Pada Kesimpulan**

>Berdasarkan analisis, terlihat perbedaan fokus signifikan antara kedua bagian. Pada **word cloud abstrak,** "efficiency", "optimize", "fast", "operation", dan "temperature" lebih unggul, menunjukkan penekanan pada **aspek teknis dan operasional sistem nuklir.** Menjelaskan fokus penelitian pada optimalisasi performa, kecepatan, dan efisiensi dalam konteks operasional yang aktual. Dengan "urgent", "demand", dan "climate" juga menjelaskan tekanan eksternal yang mendorong penelitian, sementara "supercritical", "neutron", dan "cooled" menandai aspek teknis spesifik yang diteliti.

>Sementara itu, **Word cloud kesimpulan** menunjukkan pergeseran menuju aspek yang lebih **strategis dan berorientasi masa depan.** "important", "sustainable", "management", "potential", dan "advanced" lebih menonjol, mencerminkan transisi pembahasan teknis menuju implikasi strategis. **Aspek keselamatan dan keamanan juga lebih ditekankan** melalui "safety", "security", "risks", dan "accidents", sementara "waste", "storage", dan "radioactivity" menguatkan fokus pada tantangan pengelolaan limbah nuklir.

>"energy" dan "power" konsisten di kedua word cloud, **namun dalam konteks yang berbeda.** Di abstrak, terkait dengan "demand" dan "generation", sedangkan di kesimpulan dikaitkan dengan "sustainable" dan "environment". Juga dengan "cooling" namun dengan penekanan berbeda - di abstrak pada aspek teknis "temperature" dan "cooled", sementara kesimpulan menjadi "cooling" sebagai aspek penting yang perlu dikelola.

>Menjelaskan bahwa **abstrak** berfokus pada "bagaimana" sistem bekerja secara teknis, sedangkan **kesimpulan** menekankan **"mengapa"** penelitian ini penting dan **"apa"** implikasi strategisnya untuk pengembangan energi nuklir yang berkelanjutan dan aman.

**3. Proporsi Total Vokal vs Konsonan**
"""

# Proporsi Total Vokal VS Konsonan pada Abstrak
jumlah_vokal = df_kata['vokal'].sum()
jumlah_konsonan = df_kata['konsonan'].sum()

colors = sns.color_palette("flare", 2)
plt.pie([jumlah_vokal, jumlah_konsonan], labels=['Vokal','Konsonan'], autopct='%1.1f%%', colors=colors, startangle=90, wedgeprops=dict(width=0.4))  # Donut :P
plt.title("Proporsi Total Vokal vs Konsonan di Abstrak", pad=10)
plt.show()

# Proporsi Total Vokal VS Konsonan pada Kesimpulan
jumlah_vokal_kesimpulan = df_kesimpulan['vokal'].sum()
jumlah_konsonan_kesimpulan = df_kesimpulan['konsonan'].sum()

colors = sns.color_palette("flare", 2)
plt.pie([jumlah_vokal_kesimpulan, jumlah_konsonan_kesimpulan], labels=['Vokal','Konsonan'], autopct='%1.1f%%', colors=colors, startangle=90, wedgeprops=dict(width=0.4))  # Donut :P
plt.title("Proporsi Total Vokal vs Konsonan di Kesimpulan", pad=10)
plt.show()

""">**Interpretasi Proporsi Total Vokal VS Konsonan di Abstrak DAN di Kesimpulan**

>Pada **bagian abstrak, komposisi konsonan mendominasi** dengan persentase sebesar **60,4%** sementara **vokal mencakup 39,6%.** Pola yang hampir identik terbentuk pada bagian **kesimpulan dimana konsonan mencapai 60,9%** dan **vokal 39,1%.** Perbedaan hanya sekitar 0,5%, menunjukkan konsistensi dalam karakteristik linguistik teks artikel. Dominasi konsonan membuktikan bahwa **teks ilmiah tentang energi nuklir memiliki kepadatan informasi tinggi.** Biasanya terkait penggunaan kata teknis kaya konsonan, istilah spesifik, dan kata benda majemuk umum dalam diskursus ilmiah. Seperti "reactors", "nuclear", "safety", "waste", dan "radioactive" yang sebelumnya teridentifikasi dalam analisis frekuensi kata.

>Keseimbangan juga **mencerminkan konsistensi gaya penulisan dan terminologi yang digunakan. Meskipun terdapat perbedaan konten** antara abstrak (teknis-operasional) dan kesimpulan (strategis), karakteristik tetap bertahan. Sehingga, meskipun fokus pembahasan berkembang, artikel mempertahankan konsistensi dalam pemilihan kosakata dan struktur bahasa. Pola 60:40 ini merefleksikan **kompleksitas teknis** yang jelas dalam ilmu pengetahuan dan teknologi, khususnya dalam bidang yang spesifik seperti teknologi nuklir.

**4. Sebaran Kompleksitas Kata**
"""

# Sebaran Kompleksitas Kata Pada Abstrak
plt.figure(figsize=(8, 5))
sns.scatterplot( data=df_kata, x='konsonan', y='vokal', palette='flare', hue='vokal', alpha=0.7, s=70)

plt.title("Sebaran Kompleksitas Kata (Konsonan vs Vokal) Pada Abstrak", fontsize=13, pad=10)
plt.xlabel("Jumlah Konsonan")
plt.ylabel("Jumlah Vokal")
plt.grid(alpha=0.3)
plt.legend(title='Jumlah Vokal', loc='upper left')
plt.tight_layout()
plt.show()

# Sebaran Kompleksitas Kata Pada Kesimpulan
plt.figure(figsize=(8, 5))
sns.scatterplot( data=df_kesimpulan, x='konsonan', y='vokal', palette='flare', hue='vokal', alpha=0.7, s=70)

plt.title("\nSebaran Kompleksitas Kata (Konsonan vs Vokal Pada Kesimpulan", fontsize=13, pad=10)
plt.xlabel("Jumlah Konsonan")
plt.ylabel("Jumlah Vokal")
plt.grid(alpha=0.3)
plt.legend(title='Jumlah Vokal', loc='upper left')
plt.tight_layout()
plt.show()

""">**Interpretasi Sebaran Kompleksitas Kata (Konsonan VS Vokal Pada Kesimpulan)**

>Pada kedua bagian teks, distribusi terkonsentrasi pada kombinasi 3-5 konsonan dan 2-4 vokal, membuat **hasil seimbang.** Konsentrasi terpadat pada kombinasi **4 konsonan dan 3 vokal** di kedua bagian, sesuai dengan kata teknis dalam bahasa Inggris yang memiliki suku kata multiple namun tetap efisien. Seperti "nuclear", "safety", "reactor", dan "energy" masuk dalam rentang kombinasi ini, untuk menyampaikan makna teknis namun tidak terlalu panjang sehingga tetap efisien untuk komunikasi ilmiah.

>Adanya perbedaan dalam sebaran kata yang lebih kompleks, membuat **abstrak, terlihat lebih banyak kata dengan kombinasi konsonan-vokal yang lebih tinggi,** seperti kata dengan 6-8 konsonan. Sementara **kesimpulan, sebaran cenderung lebih terkonsentrasi pada rentang menengah.**

>Distribusi seperti **"cluster"** di area tengah kedua grafik menunjukkan **konsistensi dalam pemilihan kosakata.** Tidak ada kata dengan kombinasi ekstrem (vokal banyak atau konsonan banyak) membuat teks menjaga keseimbangan antara presisi teknis dan keterbacaan. Pola sebaran membentuk **distribusi normal multivariat dengan pusat cluster di area kombinasi** 4 konsonan dan 3 vokal. Karakteristik ini menjadi sebuah tanda khas untuk teks-teks ilmiah dalam bidang teknologi, dimana kompleksitas terminologi diimbangi dengan efisiensi penyampaian pesan.

**5. Indeks Keragaman Kata (Perbandingan Tipe/Token)**
"""

# Indeks Keragaman Kata (Perbandingan Tipe/Token) Pada Abstrak
kata_unik = len(set(saring_kata))
jumlah_kata = len(saring_kata)
ttr = kata_unik / jumlah_kata

print("📚 Analisis Keragaman Kosakata Pada Abstrak")
print(f"Jumlah kata unik Pada Abstrak: {kata_unik}")
print(f"Total kata Pada Abstrak      : {jumlah_kata}")
print(f"Type/Token Ratio PAda Abstrak: {ttr:.2f}")

if ttr >= 0.5:
    print("\n💡 Tinggi — Menunjukkan Variasi Kosakata Pada Abstrak yang Kaya.")
else:
    print("💡 Rendah — Menunjukkan Pengulangan Kata Pada Abstrak yang Cukup Sering.")

# Indeks Keragaman Kata (Perbandingan Tipe/Token) Pada Kesimpulan
kata_unik_kesimpulan = len(set(saring_kata_kesimpulan))
jumlah_kata_kesimpulan = len(saring_kata_kesimpulan)
ttr_kesimpulan = kata_unik_kesimpulan / jumlah_kata_kesimpulan

print("\n📚 Analisis Keragaman Kosakata Pada Kesimpulan")
print(f"Jumlah kata unik Pada Kesimpulan : {kata_unik_kesimpulan}")
print(f"Total kata Pada Kesimpulan       : {jumlah_kata_kesimpulan}")
print(f"Type/Token Ratio Pada Kesimpulan : {ttr_kesimpulan:.2f}")

if ttr >= 0.5:
    print("\n💡 Tinggi — Menunjukkan Variasi Kosakata Pada Kesimpulan yang Kaya.")
else:
    print("💡 Rendah — Menunjukkan Pengulangan Kata Pada Kesimpulan yang Cukup Sering.")

""">**Interpretasi Analisis Keragaman Kosakata Pada Abstrak VS Pada Kesimpulan**

>Hasil analisis keragaman kosakata menunjukkan bahwa bagian **abstrak** memiliki **140 kata unik** dari total **202 kata**, dengan nilai **Type/Token Ratio (TTR) sebesar 0,69**. Menandakan bahwa abstrak memiliki **variasi kosakata yang kaya dan beragam**.Dengan demikian, abstrak menunjukkan **keragaman kosakata yang baik**, di mana pilihan katanya efisien dan tidak monoton meskipun ruang penulisan terbatas.

>Sementara itu, pada **kesimpulan**, ditemukan **161 kata unik** dari total **238 kata**, dengan nilai **TTR sebesar 0,68**. Yang berarti **variasi kosakata pada kesimpulan juga tergolong kaya**. Walaupun kesimpulan cenderung mengulang beberapa istilah dari bagian sebelumnya untuk memperkuat temuan atau menegaskan hasil penelitian, artikel tetap menjaga keberagaman bahasa.

>Jika dibandingkan secara langsung, nilai TTR menunjukkan **tingkat keragaman kosakata yang hampir seimbang**. Memperlihatkan konsistensi pemilihan kata dan gaya bahasa yang kaya serta ilmiah. Secara keseluruhan, baik abstrak maupun kesimpulan menunjukkan **keragaman kosakata yang tinggi**, menandakan bahwa teks disusun dengan pilihan kata yang tepat, ekspresif, dan sesuai konteks ilmiah. Mencerminkan **tingkat kompleksitas yang tinggi**, menjadi indikator positif dari **kualitas penulisan ilmiah** secara keseluruhan.
"""