# -*- coding: utf-8 -*-
"""Evaluasi Tengah Semester [ETS] Matematika Diskrit (A) - Aisyah Amalia Hamid

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mrRoI5xVtsLMQiiLaqFPtSOOBSQ6CGD5

# **Evaluasi Tengah Semester Matematika Diskrit**
**Aisyah Amalia Hamid**
**(24083010034)**

**Matematika Diskrit Kelas (A)**

**Artikel 'Research and Analysis Of New Generation Nuclear Reactors In The World**

**DOI: [10.31548/machinery/4.2023.86](https://www.researchgate.net/publication/377915095_Research_and_analysis_of_new_generation_nuclear_reactors_in_the_world)**

## **Import Library yang Diperlukan**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import re
import os
from collections import Counter
from wordcloud import WordCloud

"""## **Analisis Artikel**

**1. Input Teks dari Artikel 'Research and Analysis Of New Generation Nuclear Reactors In The World**
"""

def bagi_ke_bagian(teks):
    """
    Mencari heading umum dan mengembalikan dict {nama_bagian: isi}.
    Mencari heading seperti: Abstract, Introduction, Materials and Methods, Results, Discussion, Conclusion
    """
    pola_heading = re.compile(
        r'(?im)^(?P<header>\s*(abstract|introduction|materials and methods|materials & methods|methods|results|discussion|conclusion)\s*\.{0,1}\s*)$',
        re.MULTILINE
    )

# ----------------- TEKS -----------------
abstrak_manual = """
The research of new nuclear reactors is gaining urgent importance worldwide due to the need for continuous
improvement of technologies to ensure safety, efficiency, and emissions reduction. This is crucial in the context of climate
change and rapid technological development, which demand constant updating and improvement of nuclear energy. The
objective of the study was to analyse next-generation reactors worldwide and identify their advantages and potential
prospects for the future. The research utilized statistical, comparative, and analytical methods. The results of the analysis
considered contemporary technological and safety parameters related to the operation of such reactors, including their
ability to optimize fuel usage, enhance operational safety, and effectively manage radioactive waste. As a result of the study,
fourth-generation nuclear reactors were analysed, including fast neutron reactors using gas cooling, very high-temperature
reactors, reactors using sodium as a coolant, fast neutron reactors with lead cooling, reactors where the reaction occurs
in molten salt, and supercritical water-cooled reactors. Each of these reactors has its unique features that make them
distinctive in their application. For example, gas-cooled reactors have high productivity due to their ability to achieve
high temperatures without significant pressure. On the other hand, molten salt reactors offer flexibility in using different
types of fuel, including spent fuel, and can help reduce the level of radioactive waste through the use of special materials.
During the analysis, it was noted that fourth-generation reactors, using various cooling and reaction-slowing technologies,
are characterized by high efficiency, low accident risk, and the ability to produce stable electricity. Improved methods of
reaction control open up new possibilities for the efficient production of electricity and increased safety in nuclear energy.
The practical significance of the research lies in the opportunity to enhance modern electricity production technologies
and ensure greater safety and efficiency in the field of nuclear energy. """

pendahuluan_manual = """
Research on next-generation nuclear reactors plays a
critical role in the development of the energy sector and
ensuring stable and secure energy supply. The increasing
interest in this topic is driven by the constant need for
excellent, environmentally friendly, and efficient energy
sources in the context of global challenges related to cli-
mate change, energy security, and sustainable develop-
ment. In the modern world, urgent questions arise con-
cerning the search for a sustainable and environmentally
clean energy source. The development of nuclear energy
and next-generation nuclear reactors plays a key role in
addressing these issues. The study and exploration of this
topic aim to ensure the safety and efficiency of nuclear en-
ergy use in the future. The accelerated development of new
technologies in this field can open up new opportunities
for energy development, reduce CO2 emissions, and create
a more resilient energy supply system. However, alongside
the potential of next-generation nuclear reactors, there
are serious challenges that require comprehensive con-
sideration. In particular, safety issues arise concerning the
effective management of nuclear materials and reactions.
The development of new safety and monitoring systems,
the search for optimal materials for reactor construction,
and effective management of radioactive waste all require
in-depth research and innovative solutions. It is important
to address these aspects to create reliable and safe nuclear
energy systems capable of meeting the energy needs of the
modern world while caring for the environment."""

pendahuluan_manual_akhir = """
Since the mentioned works did not conduct a detailed
investigation into the specifics of all types of next-gener-
ation nuclear reactors, the aim of this research is to an-
alyse all characteristics that determine the efficiency and
safety of such reactors. Considering the wide range of fac-
tors influencing the operation of nuclear installations, this
work aims to examine each reactor type to identify their
distinctive features. A thorough analysis of specific details
of different constructions will help determine the optimal
direction for the further development of nuclear reactors.
This approach will systematically evaluate the impact of
each reactor type on meeting energy needs and ensuring
environmental safety in the future. """

metode_material = """
Within the conducted research, six main types of
fourth-generation nuclear reactors were considered. These
variations include:
1. Fast neutron reactor using gas cooling (GFR).
2. Reactor with very high temperatures (VHTR).
3. Reactor using sodium as a coolant (SFR).
4. Reactor with lead cooling (LFR).
5. Reactor with reactions occurring in molten salt (MSR).
6. Supercritical water-cooled reactor (SCWR). """

metode_material_akhir = """
Through the analysis, it was also determined that dif-
ferent types of reactors have their advantages and limi-
tations. For example, high-temperature reactors with gas
cooling may be more efficient in electricity and hydrogen
production, while water-cooled reactors may offer great-
er versatility and have a smaller environmental impact.
The obtained data formed the foundation for conducting
further research and identified the main directions for im-
proving reactor parameters to maximize their productivi-
ty and ensure the highest level of safety. Thus, statistical
and comparative methods, along with system-functional
approach, underscore the significance of further research
and refinement in the field of next-generation nuclear re-
actors. These aspects reveal key factors influencing their
efficiency and safety, emphasizing the need for exploring
new solutions to ensure stability and enhance their func-
tional characteristics. """

hasil = """
The growing demand for clean and sustainable energy in
the modern world stimulates continuous efforts to develop
new technologies. The development of a new generation of
nuclear reactors has become a priority to ensure efficient
electricity production. One key aspect of this process is to
increase the thermal efficiency of reactors, contributing to
the optimization of converting nuclear energy into elec-
tricity. This is essential for expanding electricity produc-
tion with minimal impact on the environment and natural
resources (Şahin & Şahin, 2021). """

hasil_akhir = """
The use of alternative fuel materials allows for tem-
perature control in the reactor, minimizes the risks of over-
heating in areas with high heat flux, and ensures a more
efficient operation of the reactor system. """

diskusi = """
Researching and analysing next-generation nuclear re-
actors is a crucial step in the development of modern
nuclear energy. This underscores the need for efficient
energy resource utilization and ensuring environmental-
ly sustainable electricity production. Fourth-generation
nuclear reactors represent a transition from old reactor
models to new, innovative systems aimed at improving
efficiency and safety. A detailed analysis of these reactors
is essential for understanding their operation, efficiency,
and environmental impact. Each reactor type is expected
to increase the thermal efficiency, reduce the risk of acci-
dents, and minimize radioactive releases. Research helps
identify the advantages and disadvantages of each type
and determines directions for further improvement. An
important feature is that each type of nuclear reactor
has unique characteristics defining its efficiency, safety,
and environmental sustainability. Different technologies
are used for energy production, with variations in heat
conversion methods, construction materials, and nucle-
ar process control. These differences determine not only
reactor performance but also potential risks and opportu-
ities for further development. Each reactor type requires
a unique approach to management, waste storage, and
safety measures, necessitating further scientific research
and analysis for optimal nuclear facility functioning. """

diskusi_akhir = """
Further research in the field of nuclear energy is cru-
cial for the gradual development of this technology. It will
allow a deeper understanding of various reactor types,
their advantages, and limitations, contribute to the devel-
opment of new control methods that enhance the safety
and efficiency of nuclear energy utilization. Moreover, re-
search can focus on reducing environmental impact and
optimizing resource utilization, which are key aspects in
the modern energy landscape. The development of new
technologies and an in-depth understanding of nuclear
facility principles play a vital role in ensuring sustainable
and safe use of nuclear energy in the future. """

kesimpulan = """
Summarizing the results of the conducted research, it
should be emphasized that the development of nuclear
technologies is of great significance for the present and
future energy landscape. Nuclear energy is considered a
substantial source due to its potential to provide electricity
over extended periods, even considering its non-renewa-
bility. However, it is important to bear in mind that modern
nuclear power plants generate radioactive waste, requiring
careful control and storage. In this context, fourth-gener-
ation reactors can not only reduce the amount of generat-
ed radioactive waste but also optimize fuel utilization and
decrease the risks of accidents. Their key advantage lies in
the use of advanced technologies allowing the processing
of waste, reducing their radioactivity and storage duration.
Additionally, new reactors may feature improved cooling
systems and automated control mechanisms, enhancing
their safety and reliability. """

kesimpulan_akhir = """
Major directions for further research into next-genera-
tion reactors may include the optimization of cooling sys-
tems to enhance heat exchange efficiency and ensure bet-
ter temperature control, the development of monitoring
systems for constant control of reactor parameters, and the
improvement of emergency systems to minimize potential
adverse consequences. Equally important is the advance-
ment of methods for managing radioactive waste, includ-
ing reduction and further processing. All these research
directions have the potential to reshape the paradigm in
nuclear energy, directing its development toward a more
sustainable, secure, and efficient future. """

# ----------------- EKSTRAKSI -----------------
bagian = {}

# Hasil ekstraksi
abstrak = bagian.get('abstrak', abstrak_manual).strip()
pendahuluan = bagian.get('pendahuluan', pendahuluan_manual).strip()
pendahuluan_akhir = bagian.get('pendahuluan_akhir', pendahuluan_manual_akhir).strip()
metode_material = bagian.get('metode_material', metode_material).strip()
metode_material_akhir = bagian.get('metode_material_akhir', metode_material_akhir).strip()
hasil = bagian.get('hasil', hasil).strip()
hasil_akhir = bagian.get('hasil_akhir', hasil_akhir).strip()
diskusi = bagian.get('diskusi', diskusi).strip()
diskusi_akhir = bagian.get('diskusi_akhir', diskusi_akhir).strip()
kesimpulan = bagian.get('kesimpulan', kesimpulan).strip()
kesimpulan_akhir = bagian.get('kesimpulan_akhir', kesimpulan_akhir).strip()

# Gabungkan seluruh teks dengan pemisah baris
semua_teks = "\n\n".join([bag for bag in [abstrak, pendahuluan, pendahuluan_akhir, metode_material, metode_material_akhir,
                                       hasil, hasil_akhir, diskusi, diskusi_akhir, kesimpulan, kesimpulan_akhir] if bag]).strip()

# ---------- Mengecek Data ----------
print("Panjang (karakter) semua_teks:", len(semua_teks))
print("Panjang (kata, perkiraan):", len(re.findall(r"\b[a-zA-Z']+\b", semua_teks)))
print("\nPratinjau (501 karakter pertama):")
print(semua_teks[:501])

# Jika kosong
if not semua_teks:
    print("\n== PERINGATAN: semua_teks kosong. ==")
    print("1) Jika kamu punya teks artikel lengkap, tempelkan ke variabel `teks_artikel_lengkap`.")
    print("2) Atau, tempelkan masing-masing ke `abstrak_manual`, `pendahuluan_manual`, `kesimpulan_manual`.")

"""**2. Tabel Pivot Konsonan-Vokal Per Kata dalam Abstrak (A) Frekuensi Kombinasi Vokal-Konsonan**"""

# Utilitas
def bersihkan_tokens(teks):
    tokens = re.findall(r"\b[a-zA-Z']+\b", teks)
    tokens = [t.strip("'").lower() for t in tokens if t.strip("'")]
    return tokens

def hitung_vokal_konsonan(kata):
    vokal = re.findall(r'[aeiou]', kata, flags=re.IGNORECASE)
    konsonan = re.findall(r'[b-df-hj-np-tv-z]', kata, flags=re.IGNORECASE)
    return len(vokal), len(konsonan)

# --- Sumber Teks ---
source_text = globals().get('semua_teks') or globals().get('all_text') or ""
if not source_text.strip():
    print("Warning: `semua_teks` dan `all_text` tidak ditemukan atau kosong. Isi variabel sebelum menjalankan analisis.")

# ---------- Persiapan Data ----------
tokens = bersihkan_tokens(source_text)
df = pd.DataFrame({'kata': tokens})
if df.empty:
    print("Tidak ada token untuk dianalisis. Hentikan eksekusi bagian pivot vokal-konsonan.")
else:
    df['vokal'], df['konsonan'] = zip(*df['kata'].map(hitung_vokal_konsonan))
    df['panjang'] = df['kata'].str.len()

    # Memastikan Kegunaan Data
    df = df[(df['vokal'] + df['konsonan']) > 0].copy()

    # ---------- Pivot: Frekuensi Total & Cacah Unik ----------
    pivot_frekuensi = df.groupby(['vokal','konsonan']).size().unstack(fill_value=0).sort_index(axis=0).sort_index(axis=1)
    pivot_cacah_unik = df.groupby(['vokal','konsonan'])['kata'].nunique().unstack(fill_value=0).sort_index(axis=0).sort_index(axis=1)

    # Persentase (Total Kata)
    total_kata = len(df)
    pivot_persen = (pivot_frekuensi / total_kata * 100).round(2) if total_kata > 0 else pivot_frekuensi * 0

    # Rata-Rata Panjang Kata per Kombinasi
    pivot_rata_panjang = df.groupby(['vokal','konsonan'])['panjang'].mean().unstack(fill_value=0).round(2).sort_index(axis=0).sort_index(axis=1)

    # ---------- Utility Plotting Function ----------
    def plot_heatmap(mat, judul, fmt='d', cmap=None, ax=None):
        sns.heatmap(mat, annot=True, fmt=fmt, cmap=cmap, cbar_kws={'label': judul}, linewidths=0.5, ax=ax)
        ax.set_title(judul)
        ax.set_xlabel('Jumlah Konsonan')
        ax.set_ylabel('Jumlah Vokal')

# ---------- Plot Heatmap 1: frekuensi & cacah unik ----------
fig, axes = plt.subplots(1, 2, figsize=(16, 6))
plot_heatmap(pivot_frekuensi, "Frekuensi Total Kombinasi Vokal-Konsonan (Gabungan artikel)", fmt='d', cmap='viridis', ax=axes[0])
plot_heatmap(pivot_cacah_unik, "Cacah Kata Unik per Kombinasi Vokal-Konsonan (Gabungan artikel)", fmt='d', cmap='coolwarm', ax=axes[1])
plt.tight_layout()
plt.show()

"""> **Frekuensi Total Kombinasi Vokal-Konsonan:** Dari hasil heatmap, kombinasi 1 vokal dan 3 konsonan paling dominan dengan frekuensi tertinggi (259). Kombinasi mewakili kata pendek seperti the, and, for, yang memang sering muncul dalam teks ilmiah berbahasa Inggris. Dari heatmap, dapat disimpulkan bahwa **semakin banyak jumlah konsonan atau vokal, intensitasnya menurun drastis,** menunjukkan bahwa teks ilmiah menggunakan struktur sederhana dan efisien.

> **Cacah Kata Unik per Kombinasi Vokal-Konsonan:** Puncak distribusi muncul pada kombinasi 3 vokal–4 konsonan (41). Meskipun tidak selalu paling sering muncul, variasi katanya paling beragam. Dengan kata lain, banyak kata berbeda dalam artikel yang memiliki komposisi vokal–konsonan seimbang, misalnya energy, safety, reactor, system, dan sebagainya. Distribusi warna yang lebih merata pada **heatmap menunjukkan variasi kosakata tersebar luas, meskipun berulang.**

---

>**✏️ Kesimpulan Ringkas:** Sebaran konsonan–vokal menunjukkan keseimbangan antara efisiensi linguistik dan keragaman kosakata. Kata dengan struktur sedang (2–3 vokal dan 3–5 konsonan) paling sering dan paling beragam digunakan, mencerminkan gaya penulisan ilmiah yang padat, formal, dan berorientasi informasi.
"""

# ---------- Plot Heatmap 2: persen & rata-rata panjang ----------
fig, axes = plt.subplots(1, 2, figsize=(16, 6))
plot_heatmap(pivot_persen, "Persentase Kombinasi Vokal-Konsonan (%)", fmt='.2f', cmap='magma', ax=axes[0])
plot_heatmap(pivot_rata_panjang, "Rata-rata Panjang Kata per Kombinasi (huruf)", fmt='.2f', cmap='viridis', ax=axes[1])
plt.tight_layout()
plt.show()

"""> **Persentase Kombinasi Vokal–Konsonan:** Heatmap memperlihatkan proporsi (%) dari setiap kombinasi jumlah vokal dan konsonan di seluruh kata dalam artikel.
Sebagian besar kata dalam teks tergolong pendek hingga sedang, dengan struktur sederhana dan efisien. Distribusi nilai menurun drastis pada kombinasi dengan jumlah vokal atau konsonan lebih tinggi (>5), menunjukkan kata panjang jarang digunakan dan hanya muncul dalam konteks teknis atau deskriptif tertentu.

> **Rata-rata Panjang Kata per Kombinasi:** Heatmap memperlihatkan hubungan antara kompleksitas fonetik (jumlah vokal dan konsonan) dengan panjang rata-rata kata (huruf). Adanya gradien warna yang meningkat dari kiri atas ke kanan bawah: semakin banyak kombinasi vokal dan konsonan, semakin panjang pula rata-rata kata.

---

>**💬 Kesimpulan:** Sebagian besar kata memiliki struktur sederhana (1–2 vokal, 3–4 konsonan) namun digunakan berulang (frekuensi tinggi). Kata dengan struktur kompleks dan panjang jauh lebih sedikit, namun membawa muatan istilah dan makna teknis penting. Secara keseluruhan, kombinasi memperlihatkan efisiensi dan keseimbangan antara keterbacaan dan kedalaman terminologi dalam tulisan.

"""

# ---------- Top Kombinasi (pastikan dihitung setelah pivot dibuat) ----------
top_freq = pivot_frekuensi.stack().sort_values(ascending=False).head(8)
top_unique = pivot_cacah_unik.stack().sort_values(ascending=False).head(8)

# ---------- Ringkasan Laporan ----------
summary_lines = []
summary_lines.append("Ringkasan Analisis Pivot Vokal-Konsonan (Gabungan: abstrak + introduction + conclusion)")
summary_lines.append(f"- Total kata (bersih): {total_kata}")
summary_lines.append(f"- Dimensi grid pivot (baris x kolom): {pivot_frekuensi.shape[0]} x {pivot_frekuensi.shape[1]}")
summary_lines.append("\nTop 8 kombinasi berdasarkan frekuensi (vokal, konsonan):")
for idx, val in top_freq.items():
    v, k = idx
    pct = (val / total_kata * 100) if total_kata > 0 else 0
    uniq = int(pivot_cacah_unik.at[v, k]) if (v in pivot_cacah_unik.index and k in pivot_cacah_unik.columns) else 0
    summary_lines.append(f"- {v} vokal, {k} konsonan: freq={int(val)} ({pct:.2f}%), cacah_unik={uniq}")

summary_lines.append("\nTop 8 kombinasi berdasarkan cacah kata unik (vokal, konsonan):")
for idx, val in top_unique.items():
    v, k = idx
    freq = int(pivot_frekuensi.at[v, k]) if (v in pivot_frekuensi.index and k in pivot_frekuensi.columns) else 0
    pct = (freq / total_kata * 100) if total_kata > 0 else 0
    summary_lines.append(f"- {v} vokal, {k} konsonan: cacah_unik={int(val)}, freq={freq} ({pct:.2f}%)")

summary_lines.append("\nCatatan:")
summary_lines.append("- Frekuensi menunjukkan total kemunculan kata dengan kombinasi tertentu.")
summary_lines.append("- Cacah unik menunjukkan berapa banyak kata berbeda yang masuk ke kombinasi tersebut.")
summary_lines.append("- Kombinasi yang memiliki frekuensi tinggi tetapi cacah unik rendah mengindikasikan pengulangan kata yang sama.")
summary_lines.append("- Pivot persentase dan rata-rata panjang kata membantu interpretasi: apakah kombinasi umum ditemui pada kata pendek/panjang atau kontribusi kecil terhadap korpus.")
print("\n".join(summary_lines))

""">**💬 Kesimpulan:** Struktur kata dalam artikel didominasi oleh kata pendek dengan 1–2 vokal dan 2–4 konsonan, namun keragaman leksikal terbesar justru muncul pada kata sedang (3 vokal, 4 konsonan).
Mencerminkan karakteristik penggunaan kata fungsi berulang, dan istilah ilmiah bervariasi untuk isi.
Secara keseluruhan, komposisi menandakan keseimbangan antara efisiensi dan kedalaman kosakata ilmiah.

**3. Jumlah Kata dalam Kalimat**
"""

def plot_hist_kata_per_kalimat(teks, bins=15):
    kalimat = [s.strip() for s in re.split(r'(?<=[.!?])\s+', teks) if s.strip()]
    jml = [len(re.findall(r"\b[a-zA-Z']+\b", k)) for k in kalimat]

    # Visualisasi Histogram
    plt.figure(figsize=(10, 6))
    plt.hist(jml, bins=bins, edgecolor='maroon', color='pink')
    plt.title("Histogram Jumlah Kata per Kalimat")
    plt.xlabel("Jumlah Kata"); plt.ylabel("Frekuensi")
    plt.grid(axis='y', ls='--', alpha=.7)
    mean, med = np.mean(jml), np.median(jml)
    [plt.axvline(v, c='k', ls=s, lw=1, label=f"{n}={v:.2f}") for v,s,n in [(mean,'--','mean'),(med,':','median')]]
    plt.legend()

    # Statistik Awal
    stats = {'n':len(jml),'mean':round(mean,2),'median':int(med),
             'std':round(np.std(jml,ddof=1),2) if len(jml)>1 else 0,
             'min':min(jml),'max':max(jml)}
    print("📊 Statistik Kata per Kalimat"); [print(f"- {k}: {v}") for k,v in stats.items()]
    return pd.DataFrame({'kalimat':kalimat,'jumlah_kata':jml}), stats

# Contoh:
df_all, stats_all = plot_hist_kata_per_kalimat(semua_teks)

""">**Interpretasi Histogram Jumlah Kata per Kalimat:** Histogram menunjukkan distribusi kalimat berdasarkan jumlah kata dalam keseluruhan teks artikel.
Dari hasil perhitungan, rata-rata panjang kalimat (mean) adalah sekitar 20,71 kata, sedangkan median berada di 21 kata. Nilai mean dan median menandakan distribusi data relatif simetris, tanpa pergeseran ekstrem.

---

>💬 **Kesimpulan Ringkas:** Hasil menunjukkan bahwa gaya penulisan artikel efisien dan informatif, dengan mayoritas kalimat berada dalam kisaran 20 kata.

**4. Jumlah Kalimat per Paragraf**
"""

def split_kalimat_sederhana(teks: str):
    if not teks or not isinstance(teks, str):
        return []
    return [s.strip() for s in re.split(r'(?<=[.!?])\s+', teks) if s.strip()]

def plot_hist_kalimat_per_paragraf(bagian_list, judul_plot=None):
    para = [b.strip() for b in (bagian_list or []) if b and isinstance(b, str) and b.strip()]
    if len(para) == 0:
        print("Warning: tidak ada paragraf yang valid untuk dianalisis.")
        return pd.DataFrame(columns=['bagian','jumlah_kalimat']), {}

    # Menghitung Jumlah Kalimat
    jml = [len(split_kalimat_sederhana(p)) for p in para]
    labels = [f'P{i+1}' for i in range(len(para))]
    df = pd.DataFrame({'bagian': labels, 'jumlah_kalimat': jml})

    # Statistik Ringkas
    mean, med = np.mean(jml), np.median(jml)
    stats = {
        'n_paragraf': len(jml),
        'mean': round(mean, 2),
        'median': int(med),
        'std': round(np.std(jml, ddof=1), 2) if len(jml) > 1 else 0,
        'min': int(min(jml)),
        'max': int(max(jml))
    }

    print("📊 Statistik Kalimat per Paragraf")
    for k, v in stats.items():
        print(f"- {k}: {v}")

    unique_vals = sorted(set(jml))
    plt.figure(figsize=(10, 6))
    if len(unique_vals) <= 8 or len(jml) <= 20:
        minv, maxv = min(jml), max(jml)
        bins = np.arange(minv - 0.5, maxv + 1.5, 1)
        plt.hist(jml, bins=bins, edgecolor='k')
        plt.xlabel("Jumlah Kalimat per Paragraf")
        plt.ylabel("Frekuensi")

    # Judul & Garis Mean n Median
    if not judul_plot:
        judul_plot = "Histogram Jumlah Kalimat per Paragraf (Artikel)"
    plt.title(judul_plot)
    plt.grid(axis='y', ls='--', alpha=0.6)

    # Garis Mean & Median
    plt.axvline(mean, color='black', linestyle='--', linewidth=1, label=f"mean={mean:.2f}")
    plt.axvline(med, color='black', linestyle=':', linewidth=1, label=f"median={int(med)}")
    plt.hist(jml, bins=bins, edgecolor='pink', color='maroon')
    plt.legend()
    plt.tight_layout()
    plt.show()

    return df, stats

# Print
df_para_all, stats_para_all = plot_hist_kalimat_per_paragraf(semua_teks.split('\n\n'), judul_plot="Histogram Jumlah Kalimat per Paragraf (Abstrak)")

""">🔍 **Interpretasi Histogram Jumlah Kalimat per Paragraf:** Distribusi jumlah kalimat di setiap paragraf dalam teks artikel. Dengan
hasil mean sekitar 6,55, sedangkan median berada pada 5 kalimat. Artinya, sebagian besar paragraf terdiri dari 4–6 kalimat, dengan hanya beberapa paragraf yang lebih panjang hingga mencapai 10–13 kalimat.

---

>💬 **Kesimpulan Ringkas:** Sebagian besar paragraf terdiri dari 5–6 kalimat, menunjukkan bahwa gaya penulisan abstrak bersifat informatif, padat, dan terstruktur. Menyampaikan ide lengkap dalam satu paragraf tanpa membuatnya terlalu panjang, sehingga tetap mudah dibaca namun tetap komprehensif.

# **Analisis Tambahan XD**

**1. Frekuensi Kata Terbanyak dalam Abstrak VS Frekuensi Kata Terbanyak dalam Kesimpulan**
"""

# Frekuensi Kata Terbanyak dalam semua_teks
kata_stop = set(['the','and','of','in','to','for','a','is','on','as','was','by','with','an','at','this','that','it'])
# Assuming 'semua_teks' contains the full text from the article
# saring_kata = [w.lower() for w in kata if w.lower() not in kata_stop and len(w) > 2] # Assuming 'kata' was from the abstract
saring_kata_all = [w.lower() for w in sanitize_tokens(semua_teks) if w.lower() not in kata_stop and len(w) > 2]
jumlah_kata_all = Counter(saring_kata_all)

df_frekuensi_all = pd.DataFrame(jumlah_kata_all.most_common(10), columns=['kata', 'jumlah'])

plt.figure(figsize=(8,4))
sns.barplot(data=df_frekuensi_all, x='jumlah', y='kata', palette='flare', hue='kata', legend=False)

# Tambahkan nilai frekuensi di ujung batang
for i, v in enumerate(df_frekuensi_all['jumlah']):
    plt.text(v + 0.2, i, str(v), color='black', va='center', fontsize=10)

plt.title("10 Kata Paling Sering Muncul dalam Keseluruhan Teks Artikel")
plt.xlabel("Frekuensi")
plt.ylabel("Kata")
plt.tight_layout()
plt.show()

""">🔍 **Interpretasi Diagram Frekuensi Kata Terbanyak:** Secara keseluruhan, distribusi menegaskan bahwa artikel memiliki konsistensi tematik tinggi, dengan dominasi istilah teknis utama yang berulang untuk menegaskan ide penelitian.

>Dominasi kata seperti nuclear, reactor(s), dan energy menunjukkan bahwa isi artikel berfokus kuat pada topik energi nuklir dan efisiensi reaktor generasi baru. **Pola frekuensi menggambarkan keterpaduan terminologi ilmiah dan penggunaan kosakata konsisten** untuk mendukung tema utama penelitian.

**2. Word Cloud**
"""

# Word Cloud semua_teks
teks_bersih_all = " ".join(saring_kata_all) # Use the filtered words from the whole text

wordcloud_all = WordCloud(width=800, height=400, background_color='white', colormap='flare', max_words=100).generate(teks_bersih_all)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud_all, interpolation='bilinear')
plt.axis("off")
plt.title("Word Cloud – Kata Dominan dalam Keseluruhan Teks Artikel", fontsize=14, pad=15)
plt.tight_layout()
plt.show()

"""> **Interpretasi Word Cloud – Kata Dominan dalam Keseluruhan Teks Artikel:** Word Cloud menampilkan kata dominan dalam teks artikel. Setiap kata mencerminkan frekuensi kemunculannya, sehingga kata yang lebih besar berarti lebih sering muncul dan lebih penting secara tematik.

> **💬 Kesimpulan Ringkas:** Word Cloud mempertegas bahwa artikel memiliki fokus utama pada penelitian reaktor nuklir generasi baru dengan prioritas keamanan, efisiensi, dan keberlanjutan energi. Komposisi kata dominan memperlihatkan keterpaduan konsep antara inovasi teknologi dan tanggung jawab lingkungan dalam konteks pengembangan energi masa depan.

**3. Proporsi Total Vokal vs Konsonan**
"""

# Proporsi Total Vokal VS Konsonan pada semua_teks
# Assuming 'df' is the DataFrame created from all_text in a previous cell
jumlah_vokal_all = df['vokal'].sum()
jumlah_konsonan_all = df['konsonan'].sum()

colors = sns.color_palette("flare", 2)
plt.pie([jumlah_vokal_all, jumlah_konsonan_all], labels=['Vokal','Konsonan'], autopct='%1.1f%%', colors=colors, startangle=90, wedgeprops=dict(width=0.4))  # Donut :P
plt.title("Proporsi Total Vokal vs Konsonan di Keseluruhan Teks Artikel", pad=10)
plt.show()

"""**🔍 Interpretasi Diagram Donat – Proporsi Total Vokal vs Konsonan:** Diagram menunjukkan perbandingan total huruf vokal dan konsonan dalam keseluruhan teks artikel.
Hasil analisis memperlihatkan bahwa konsonan mendominasi sebesar 60,7%, sedangkan vokal mencakup 39,3% dari total huruf yang dianalisis. Rasio memperjelas bahwa struktur kata dalam teks ilmiah tersebut lebih banyak didominasi oleh konsonan dibandingkan vokal.

**4. Sebaran Kompleksitas Kata**
"""

# Sebaran Kompleksitas Kata Pada Keseluruhan Teks
# Assuming 'df' is the DataFrame created from all_text in a previous cell
plt.figure(figsize=(8, 5))
sns.scatterplot( data=df, x='konsonan', y='vokal', palette='flare', hue='vokal', alpha=0.7, s=70)

plt.title("Sebaran Kompleksitas Kata (Konsonan vs Vokal) Pada Keseluruhan Teks Artikel", fontsize=13, pad=10)
plt.xlabel("Jumlah Konsonan")
plt.ylabel("Jumlah Vokal")
plt.grid(alpha=0.3)
plt.legend(title='Jumlah Vokal', loc='upper left')
plt.tight_layout()
plt.show()

""">**Interpretasi Hasil: Sebaran Kompleksitas Kata:** Hampir tidak ada kata yang panjang atau kompleks dalam teks ini. 6 vokal atau 6 konsonan sudah dianggap "panjang" dalam artikel, yang dalam bahasa Indonesia sering kali masih termasuk kata dengan tingkat kompleksitas menengah.

>**Karakteristik Teks yang Ramah Pembaca:** Sebaran berhenti di 6 untuk menjelaskan teks artikel menggunakan kosakata yang efisien dan ringkas. Menghindari kata-kata yang sangat teknis atau panjang yang bisa menghambat pemahman.

>**Kesimpulan Naratif:** Secara keseluruhan, kompleksitas kata dari artikel menggambarkan sebuah teks yang efisien. Dominan kata pendek membuat teks ini ideal untuk menyampaikan informasi secara cepat dan jelas walaupun terkesan berat. Mengutamakan fungsionalitas dan kejelasan daripada kerumitan linguistik.

**5. Indeks Keragaman Kata (Perbandingan Tipe/Token)**
"""

# Utility
def tokenize_words(teks: str):
    return re.findall(r"\b[a-zA-Z']+\b", teks.lower())

def estimate_syllables(kata: str):
    w = kata.lower()
    groups = re.findall(r'[aeiouy]+', w)
    syl = max(1, len(groups))
    if w.endswith("e") and len(groups) > 1:
        syl -= 1
    return max(1, syl)

# Plotting
def syllable_distribution_plots(full_text: str, saveprefix: str = None):
    words = tokenize_words(full_text)
    syllables = [estimate_syllables(w) for w in words]
    if not syllables:
        print("Tidak ada kata untuk diplot.")
        return {}, {}

    # Boxplot dan Violin Plot
    fig, ax = plt.subplots(1, 2, figsize=(14, 5))
    sns.boxplot(x=syllables, ax=ax[0], color=sns.color_palette('flare')[1]) # Terapkan warna flare
    ax[0].set_title("Boxplot: Jumlah Suku Kata per Kata")
    ax[0].set_xlabel("Jumlah Suku Kata")
    sns.violinplot(x=syllables, ax=ax[1], color=sns.color_palette('flare')[1]) # Terapkan warna flare
    ax[1].set_title("Violin: Distribusi Jumlah Suku Kata per Kata")
    ax[1].set_xlabel("Jumlah Suku Kata")
    plt.tight_layout()
    if saveprefix:
        fig.savefig(f"{saveprefix}_syllable_box_violin.png", dpi=300)
    plt.show()

    # ECDF
    fig, ax = plt.subplots(figsize=(8, 4))
    x = np.sort(syllables)
    y = np.arange(1, len(x) + 1) / len(x)
    ax.plot(x, y, marker='.', linestyle='none', color=sns.color_palette('flare')[0]) # Terapkan warna flare
    ax.set_xlabel("Jumlah Suku Kata per Kata")
    ax.set_ylabel("ECDF")
    ax.set_title("ECDF Jumlah Suku Kata per Kata")
    if saveprefix:
        fig.savefig(f"{saveprefix}_syllable_ecdf.png", dpi=300)
    plt.tight_layout()
    plt.show()

    return {'syllables': syllables}, {'n_words': len(words)}

# --- Main execution ---
if 'semua_teks' in globals() and semua_teks:
    syllable_distribution_plots(semua_teks, saveprefix='article')
else:
    print("Variabel 'semua_teks' tidak ditemukan atau kosong. Pastikan Anda telah menjalankan sel sebelumnya untuk memuat teks.")

""">**Interpretasi Hasil: Boxplot Jumlah Suku Kata per Kata (ECOF):** Dari data, dapat disimpulkan bahwa teks ECOF didominasi oleh kata-kata pendek dan sangat efisien. Rentang data hanya mencakup 1 hingga 6 suku kata, dan mayoritas kata kemungkinan besar berkumpul di bagian bawah rentang. Menunjukkan sebuah teks yang dirancang untuk keterbacaan maksimal dan pemahaman yang cepat.

>**Indikasi Pola Komunikasi yang Langsung:** Boxplot pada jumlah suku kata rendah (median kemungkinan berada di 1 atau 2 suku kata). Karakteristik sangat sesuai dengan teks bertema ekonomi, keuangan, atau pedoman operasional (ECOF) mengutamakan presisi dan kejelasan instruksi atau informasinya.

>**Konsistensi dan Uniformitas Bahasa:** Boxplot menunjukkan kotak (IQR) yang pendek dan "whisker" yang tidak terlalu panjang, menjelaskan bahwa variasi panjang kata tidak besar. Dengan hampir seluruh kata yang digunakan memiliki tingkat kesederhanaan yang konsisten.

**6. Flesch-Kincaid (Uji Keterbacaan Artikel)**
"""

# --- Fungsi Utility ---
def split_kalimat_sederhana(teks: str):
    if not teks or not isinstance(teks, str):
        return []
    return [s.strip() for s in re.split(r'(?<=[.!?])\s+', teks) if s.strip()]

def tokenize_words(teks: str):
    return re.findall(r"\b[a-zA-Z']+\b", teks.lower())

def estimate_syllables(kata: str):
    w = kata.lower()
    groups = re.findall(r'[aeiouy]+', w)
    syl = max(1, len(groups))
    if w.endswith("e") and len(groups) > 1:
        syl -= 1
    return max(1, syl)

def flesch_reading_ease(text: str):
    sents = split_kalimat_sederhana(text)
    words = tokenize_words(text)
    total_words = len(words)
    total_sentences = max(1, len(sents))
    total_syllables = sum(estimate_syllables(w) for w in words)

    # Tanpa Kata atau Kalimat
    if total_words == 0 or total_sentences == 0:
        return {'Flesch': None, 'words': 0, 'sentences': 0, 'syllables': 0}

    score = 206.835 - 1.015 * (total_words/total_sentences) - 84.6 * (total_syllables/total_words)
    return {'Flesch': round(score,2), 'words': total_words, 'sentences': total_sentences, 'syllables': total_syllables}

# Printing!!
if 'semua_teks' in globals() and semua_teks:
    flesch_result = flesch_reading_ease(semua_teks)
    print("Perkiraan Flesch:", flesch_result)

    # Sarankan langkah selanjutnya berdasarkan skor Flesch
    if flesch_result and flesch_result['Flesch'] is not None:
        score = flesch_result['Flesch']
        print("\n--- Interpretasi Skor Flesch Reading Ease ---")
        if score >= 90:
            print("Sangat mudah dibaca (cocok untuk siswa kelas 5).")
        elif score >= 80:
            print("Mudah dibaca (cocok untuk siswa kelas 6).")
        elif score >= 70:
            print("Cukup mudah dibaca (cocok untuk siswa kelas 7 & 8).")
        elif score >= 60:
            print("Standar (cocok untuk siswa SMA).")
        elif score >= 50:
            print("Agak sulit dibaca (cocok untuk mahasiswa S1).")
        elif score >= 30:
            print("Sulit dibaca (cocok untuk lulusan universitas).")
        else:
            print("Sangat sulit dibaca (cocok untuk profesional/akademisi).")

else:
    print("Variabel 'semua_teks' tidak ditemukan atau kosong. Pastikan Anda telah menjalankan sel sebelumnya untuk memuat teks.")

""">**🔍 Interpretasi Hasil Flesch Reading Ease:** Skor Flesch termasuk dalam kategori “Sangat Sulit Dibaca”, yang berarti teks hanya mudah dipahami oleh pembaca profesional, akademisi, atau peneliti dengan latar belakang keilmuan yang sesuai.

> Skor Flesch yang rendah disebabkan oleh dua faktor: **Panjang rata-rata kalimat yang tinggi dan kepadatan suku kata per kata.** Sehingga, walaupun struktur kalimat yang panjang dan kata-kata bersuku banyak memperkaya makna ilmiah, tetapi mengurangi tingkat keterbacaan bagi pembaca umum. Dengan demikian, teks ini dirancang untuk pembaca ahli, bukan untuk konsumsi populer.

**7. Indeks Keragaman Kata (Perbandingan Tipe/Token)**
"""

# Indeks Keragaman Kata (Perbandingan Tipe/Token) Pada Keseluruhan Teks
# Assuming 'saring_kata_all' contains the filtered words from the whole text
kata_unik_all = len(set(saring_kata_all))
jumlah_kata_all_ttr = len(saring_kata_all)
ttr_all = kata_unik_all / jumlah_kata_all_ttr

print("📚 Analisis Keragaman Kosakata Pada Keseluruhan Teks Artikel")
print(f"Jumlah kata unik Pada Keseluruhan Teks : {kata_unik_all}")
print(f"Total kata Pada Keseluruhan Teks       : {jumlah_kata_all_ttr}")
print(f"Type/Token Ratio Pada Keseluruhan Teks : {ttr_all:.2f}")

if ttr_all >= 0.5:
    print("\n💡 Tinggi — Menunjukkan Variasi Kosakata Pada Keseluruhan Teks yang Kaya.")
else:
    print("💡 Rendah — Menunjukkan Pengulangan Kata Pada Keseluruhan Teks yang Cukup Sering.")

""">**🔍 Interpretasi Analisis Keragaman Kosakata (Type/Token Ratio):** Hasil menunjukkan bahwa teks artikel memiliki 454 kata unik dari 1.050 total kata, dengan Type/Token Ratio (TTR) sebesar 0,43.
Nilai tergolong rendah hingga sedang, yang berarti dalam teks terdapat pengulangan kata cukup sering. Terutama pada istilah teknis utama dan kata kunci penelitian.

>Dengan TTR sebesar 0,43, artikel ini memperlihatkan **keseimbangan antara keragaman kosakata ilmiah yang cukup luas dan pengulangan istilah inti untuk menjaga kejelasan konsep.**
"""